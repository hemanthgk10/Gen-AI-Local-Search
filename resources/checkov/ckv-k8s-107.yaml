---
category: Monitoring
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state. Controller manager has an option of `Profiling`, which can help to debug any issues or bottle necks.

    Profiling is the act of analyzing the performance of an applications. It is recommended to disable this `profiling` option, if not needed.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state. Controller manager has an option of `Profiling`, which can help to debug any issues or bottle necks.

    Profiling is the act of analyzing the performance of an applications. It is recommended to disable this `profiling` option, if not needed.

    #### Rationale
    Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-controller-manager
    ```
    Verify that the `--profiling argument` is set to `false`.

    #### Remediation
    Edit the Controller Manager pod specification file `/etc/kubernetes/manifests/kube-controller-manager.yaml` on the master node and set the below parameter.
    ```
      --profiling=false
    ```

    By default, profiling is enabled.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          component: kube-controller-manager
          tier: control-plane
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - exec /usr/local/bin/kube-controller-manager --v=2
            --cloud-config=/etc/gce.conf
            --use-service-account-credentials=true
            --kubeconfig=/etc/srv/kubernetes/kube-controller-manager/kubeconfig
            --root-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt
            --service-account-private-key-file=/etc/srv/kubernetes/pki/serviceaccount.key
            --cluster-name=zork
            --cluster-cidr=10.48.0.0/14
            --service-cluster-ip-range=10.32.240.0/20
            --allocate-node-cidrs=true
    +       --profiling=false
            ...
            ...
          image: k8s.gcr.io/kube-controller-manager:v1.9.7
          name: kube-controller-manager
          volumeMounts:
          - mountPath: /etc/ssl
            name: etcssl
            readOnly: true
          - mountPath: /usr/share/ca-certificates
            name: usrsharecacerts
            readOnly: true
          - mountPath: /var/ssl
            name: varssl
            readOnly: true
          - mountPath: /etc/openssl
            name: etcopenssl
            readOnly: true
          - mountPath: /etc/pki
            name: etcpki
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/ssl
          name: etcssl
        - hostPath:
            path: /usr/share/ca-certificates
          name: usrsharecacerts
        - hostPath:
            path: /var/ssl
          name: varssl
        - hostPath:
            path: /etc/openssl
          name: etcopenssl
        - hostPath:
            path: /etc/pki
          name: etcpki
        ...
        ...
    ```

    #### CIS Controls:
    **Version 6**
      14 *Controlled Access Based on the Need to Know* -- Controlled Access Based on the Need to Know.

    #### References
    * https://kubernetes.io/docs/admin/kube-controller-manager/
    * https://github.com/kubernetes/kubernetes/issues/28484
provider: Kubernetes
ruleId: CKV_K8S_107
severity: Low
sid: ckv-k8s-107
title: "Ensure that the --profiling argument is set to false"
