---
category: IAM
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    Some types of these controllers are:

      * **Node controller**: Responsible for noticing and responding when nodes go down.
      * **Job controller**: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
      * **Endpoints controller**: Populates the Endpoints object (that is, joins Services & Pods).
      * **Service Account & Token controllers**: Create default accounts and API access tokens for new namespaces.

    Some times the pods spun up by Job Controller needs to access API servers. Those API servers because of security reasons might be TLS encrypted. In order to establish connection and communicate securely, the pods needs to establish a TLS connection and before establishing connections they need to verify the API server's serving certificate.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    Some types of these controllers are:

      * **Node controller**: Responsible for noticing and responding when nodes go down.
      * **Job controller**: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
      * **Endpoints controller**: Populates the Endpoints object (that is, joins Services & Pods).
      * **Service Account & Token controllers**: Create default accounts and API access tokens for new namespaces.

    Some times the pods spun up by Job Controller needs to access API servers. Those API servers because of security reasons might be TLS encrypted. In order to establish connection and communicate securely, the pods needs to establish a TLS connection and before establishing connections they need to verify the API server's serving certificate.

    #### Rationale
    Processes running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks.

    Providing the root certificate for the API server's serving certificate to the controller manager with the `--root-ca-file` argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-controller-manager
    ```
    Verify that the `--root-ca-file` argument exists and is set to a certificate bundle file containing the root certificate for the API server's serving certificate.

    #### Remediation
    Edit the Controller Manager pod specification file `/etc/kubernetes/manifests/kube-controller-manager.yaml` on the master node and set the `--root-ca-file` parameter to the certificate bundle file.
    ```
      --root-ca-file=<path/to/file>
    ```

    By default, `--root-ca-file` is not set.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          component: kube-controller-manager
          tier: control-plane
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - exec /usr/local/bin/kube-controller-manager --v=2
            --cloud-config=/etc/gce.conf
            --kubeconfig=/etc/srv/kubernetes/kube-controller-manager/kubeconfig
            --cluster-name=zork
            --cluster-cidr=10.48.0.0/14
            --service-cluster-ip-range=10.32.240.0/20
            --allocate-node-cidrs=true
            --use-service-account-credentials=true
            --service-account-private-key-file=/etc/srv/kubernetes/pki/serviceaccount.key
    +       --root-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt
            ...
            ...
          image: k8s.gcr.io/kube-controller-manager:v1.9.7
          name: kube-controller-manager
          volumeMounts:
          - mountPath: /etc/ssl
            name: etcssl
            readOnly: true
          - mountPath: /usr/share/ca-certificates
            name: usrsharecacerts
            readOnly: true
          - mountPath: /var/ssl
            name: varssl
            readOnly: true
          - mountPath: /etc/openssl
            name: etcopenssl
            readOnly: true
          - mountPath: /etc/pki
            name: etcpki
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/ssl
          name: etcssl
        - hostPath:
            path: /usr/share/ca-certificates
          name: usrsharecacerts
        - hostPath:
            path: /var/ssl
          name: varssl
        - hostPath:
            path: /etc/openssl
          name: etcopenssl
        - hostPath:
            path: /etc/pki
          name: etcpki
        ...
        ...
    ```

    #### Impact
    You need to setup and maintain root certificate authority file.

    #### CIS Controls:
    **Version 6**
      *14.2 Encrypt All Sensitive Information Over Less-trusted Networks* -- All communication of sensitive information over less-trusted networks should be encrypted. Whenever information flows over a network with a lower trust level, the information should be encrypted.

    **Version 7**
      *14.4 Encrypt All Sensitive Information in Transit* -- Encrypt all sensitive information in transit.

    #### References
    * https://kubernetes.io/docs/admin/kube-controller-manager/
    * https://github.com/kubernetes/kubernetes/issues/11000
    * https://github.com/kubernetes/kubernetes/issues/54665#issuecomment-340960398
provider: Kubernetes
ruleId: CKV_K8S_111
severity: Medium
sid: ckv-k8s-111
title: "Ensure that the --root-ca-file argument is set as appropriate"
