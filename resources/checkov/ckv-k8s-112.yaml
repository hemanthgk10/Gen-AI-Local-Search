---
category: Security
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    In a Kubernetes cluster, the components on the worker nodes - kubelet and kube-proxy - need to communicate with Kubernetes master components. In order to ensure that communication is kept private, not interfered with, and ensure that each component of the cluster is talking to another trusted component, we strongly recommend using client TLS certificates.

    Kubernetes v1.8 and higher kubelet implements beta features for enabling rotation of its client and/or serving certificates. These can be enabled through the respective `RotateKubeletClientCertificate` and `RotateKubeletServerCertificate` feature flags on the kubelet or it can be set on the controller manager.

    Enabling the `RotateKubeletServerCertificate` flag, will set the kubelet server certificate rotation on controller manager.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    In a Kubernetes cluster, the components on the worker nodes - kubelet and kube-proxy - need to communicate with Kubernetes master components. In order to ensure that communication is kept private, not interfered with, and ensure that each component of the cluster is talking to another trusted component, we strongly recommend using client TLS certificates.

    Kubernetes v1.8 and higher kubelet implements beta features for enabling rotation of its client and/or serving certificates. These can be enabled through the respective `RotateKubeletClientCertificate` and `RotateKubeletServerCertificate` feature flags on the kubelet or it can be set on the controller manager.

    Enabling the `RotateKubeletServerCertificate` flag, will set the kubelet server certificate rotation on controller manager.

    #### Rationale
    `RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

    **Note:** This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-controller-manager
    ```
    Verify that `RotateKubeletServerCertificate` argument exists and is set to `true`.

    #### Remediation
    Edit the Controller Manager pod specification file `/etc/kubernetes/manifests/kube-controller-manager.yaml` on the master node and set the `--feature-gates` parameter to include `RotateKubeletServerCertificate=true`.
    ```
      --feature-gates=RotateKubeletServerCertificate=true
    ```

    By default, `RotateKubeletServerCertificate` is set to `true` this recommendation verifies that it has not been disabled.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          component: kube-controller-manager
          tier: control-plane
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - exec /usr/local/bin/kube-controller-manager --v=2
            --cloud-config=/etc/gce.conf
            --kubeconfig=/etc/srv/kubernetes/kube-controller-manager/kubeconfig
            --cluster-name=zork
            --cluster-cidr=10.48.0.0/14
            --service-cluster-ip-range=10.32.240.0/20
            --allocate-node-cidrs=true
            --use-service-account-credentials=true
            --service-account-private-key-file=/etc/srv/kubernetes/pki/serviceaccount.key
            --root-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt
    +       --feature-gates=RotateKubeletServerCertificate=true
            ...
            ...
          image: k8s.gcr.io/kube-controller-manager:v1.9.7
          name: kube-controller-manager
          volumeMounts:
          - mountPath: /etc/ssl
            name: etcssl
            readOnly: true
          - mountPath: /usr/share/ca-certificates
            name: usrsharecacerts
            readOnly: true
          - mountPath: /var/ssl
            name: varssl
            readOnly: true
          - mountPath: /etc/openssl
            name: etcopenssl
            readOnly: true
          - mountPath: /etc/pki
            name: etcpki
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/ssl
          name: etcssl
        - hostPath:
            path: /usr/share/ca-certificates
          name: usrsharecacerts
        - hostPath:
            path: /var/ssl
          name: varssl
        - hostPath:
            path: /etc/openssl
          name: etcopenssl
        - hostPath:
            path: /etc/pki
          name: etcpki
        ...
        ...
    ```

    #### Impact
    You need to setup and maintain root certificate authority file.

    #### CIS Controls:
    **Version 6**
      *14.2 Encrypt All Sensitive Information Over Less-trusted Networks* -- All communication of sensitive information over less-trusted networks should be encrypted. Whenever information flows over a network with a lower trust level, the information should be encrypted.

    **Version 7**
      *14.4 Encrypt All Sensitive Information in Transit* -- Encrypt all sensitive information in transit.

    #### References
    * https://kubernetes.io/docs/admin/kube-controller-manager/
    * https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller
    * https://github.com/kubernetes/features/issues/267
    * https://github.com/kubernetes/kubernetes/pull/45059
provider: Kubernetes
ruleId: CKV_K8S_112
severity: Low
sid: ckv-k8s-112
title: "Ensure that the RotateKubeletServerCertificate argument is set to true"
