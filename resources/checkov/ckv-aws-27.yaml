category: Queues
checkTool: checkov
checkType: CloudFormation
compliance: []
description: To protect the data in a queue's messages, you can enable server-side
  encryption (SSE) for a queue. Amazon SQS integrates with the AWS Key Management
  Service (AWS KMS) to manage customer master keys (CMKs) for server-side encryption
  (SSE). The CMK that you assign to your queue must have a key policy that includes
  permissions for all principals that are authorized to use the queue.
extra:
  entity: AWS::SQS::Queue
  type: resource
guidelines: |-
  #### Description
  To protect the data in a queue's messages, you can enable server-side encryption (SSE) for a queue. Amazon SQS integrates with the AWS Key Management Service (AWS KMS) to manage customer master keys (CMKs) for server-side encryption (SSE). The CMK that you assign to your queue must have a key policy that includes permissions for all principals that are authorized to use the queue.

  #### Rationale
  Unencrypted SQS mean that data stored might be at risk of potential security attack. Hence it is important to make sure that no compromise has been done as far as the security of your sensitive or confidential data is concerned.

  #### Remediation
  Enable server-side encryption (SSE) for an Amazon SQS data, specify the CMK ID by setting the KmsMasterKeyId attribute

  Terraform example:
  ```
  resource "aws_sqs_queue" "terraform_queue" {
    name                              = "terraform-example-queue"
  + kms_master_key_id                 = "arn:aws:kms:us-west-2:111122223333:key/example",
    kms_data_key_reuse_period_seconds = 300
    ...
    ...
  }
  ```

  Cloudformation example:
  ```json
  {
    "Type" : "AWS::SQS::Queue",
    "Properties" : {
        "QueueName" : "terraform-example-queue"
        "FifoQueue" : true,
        "KmsDataKeyReusePeriodSeconds" : 300,
  +     "KmsMasterKeyId" : "arn:aws:kms:us-west-2:111122223333:key/example",,
        ...
        ...
      }
  }
  ```

  #### References
  * https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue#kms_master_key_id
  * https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html
lwid: []
provider: AWS
ruleId: CKV_AWS_27
severity: Medium
sid: ckv-aws-27
title: Ensure all data stored in the SQS queue is encrypted
autofix: true
remediation:
- checkType: CloudFormation
  steps:
  - actions: modify
    resource: [ "resource" ]
    resourceAttribute: KmsMasterKeyId
    resourceAttributeType: string
    resourceAttributeValue: "<Provide the ARN for KMS key>"
    resourceType: [ "AWS::SQS::Queue" ]
- checkType: Terraform
  steps:
  - action: add
    resource: [ "resource" ]
    resourceAttribute: kms_master_key_id
    resourceAttributeType: string
    resourceAttributeValue: "<Provide the ARN of the KMS key>"
    resourceType: [ "aws_sqs_queue" ]
