---
category: Security
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    kubelet is the primary "node agent" that runs on each node in a Kubernetes cluster. The kubelet works in terms of a PodSpec. A PodSpec is a YAML or JSON object that describes a pod. The kubelet takes a set of PodSpecs that are provided through various mechanisms (primarily through the apiserver) and ensures that the containers described in those PodSpecs are running and healthy.

    Users access the Kubernetes API using kubectl, client libraries, or by making REST requests.

    Kubectl has a nice port-forward feature, which allows you to access and interact with internal Kubernetes cluster processes from your localhost. You can use this method to investigate issues and adjust your services locally without the need to expose them beforehand.

    When `--streaming-connection-idle-timeout` to `0`, it allows unlimited connection without timing out. This is not recommended, so it is ideal to set a timeout for such streaming connections.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    kubelet is the primary "node agent" that runs on each node in a Kubernetes cluster. The kubelet works in terms of a PodSpec. A PodSpec is a YAML or JSON object that describes a pod. The kubelet takes a set of PodSpecs that are provided through various mechanisms (primarily through the apiserver) and ensures that the containers described in those PodSpecs are running and healthy.

    Users access the Kubernetes API using kubectl, client libraries, or by making REST requests.

    Kubectl has a nice port-forward feature, which allows you to access and interact with internal Kubernetes cluster processes from your localhost. You can use this method to investigate issues and adjust your services locally without the need to expose them beforehand.

    When `--streaming-connection-idle-timeout` to `0`, it allows unlimited connection without timing out. This is not recommended, so it is ideal to set a timeout for such streaming connections.

    #### Rationale
    Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

    **Note:** By default, `--streaming-connection-idle-timeout` is set to `4 hours` which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.

    #### Audit
    Run the following command on each node:
    ```
     ps -ef | grep kubelet
    ```
    Verify that the `--streaming-connection-idle-timeout` argument is not set to `0`.

    If the argument is not present, and there is a Kubelet config file specified by `--config`, check that it does not set `streamingConnectionIdleTimeout` to `0`.

    #### Remediation
    If using a Kubelet config file, edit the file to set `streamingConnectionIdleTimeout` to a value other than `0`.

    If using executable arguments, edit the kubelet service file `/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and set the below parameter in `KUBELET_AUTHZ_ARGS` variable.
    ```
        --streaming-connection-idle-timeout=5m
    ```

    Based on your system, restart the `kubelet` service. For example:
    ```
       systemctl daemon-reload
       systemctl restart kubelet.service
    ```

    By default, `--streaming-connection-idle-timeout` is set to `4 hours`.

    Example of Kubelet Configuration file:
    ```yaml
         apiVersion: kubelet.config.k8s.io/v1beta1
         kind: KubeletConfiguration
         address: 0.0.0.0
         authentication:
            anonymous:
              enabled: false
            x509:
              clientCaFile: "/etc/pf9/kube.d/certs/kubelet/server/ca.crt"
         evictionHard:
            memory.available:  "200Mi"
         podCIDR: 10.200.0.0/16
         authorization:
            mode: Webhook
         maxPods: 200
         readOnlyPort: 0
    -    streamingConnectionIdleTimeout: "4h0m0s"
    +    streamingConnectionIdleTimeout: "5m"
         ...
         ...
    ```

    #### Impact
    Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.

    #### References
    * https://kubernetes.io/docs/admin/kubelet/
    * https://github.com/kubernetes/kubernetes/pull/18552

    #### CIS Controls:
    **Version 6**
      *9 Limitation and Control of Network Ports, Protocols, and Services* -- Limitation and Control of Network Ports, Protocols, and Services.
provider: Kubernetes
ruleId: CKV_K8S_143
severity: Medium
sid: ckv-k8s-143
title: "Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
