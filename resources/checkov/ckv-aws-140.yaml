---
category: Encryption
checkTool: checkov
checkType: Terraform
compliance: []
description: |-
    Amazon Aurora (Aurora) is a fully managed relational database engine that's compatible with MySQL and PostgreSQL. You already know how MySQL and PostgreSQL combine the speed and reliability of high-end commercial databases with the simplicity and cost-effectiveness of open-source databases. The code, tools, and applications you use today with your existing MySQL and PostgreSQL databases can be used with Aurora.

    Amazon Aurora Global Database is designed for globally distributed applications, allowing a single Amazon Aurora database to span multiple AWS regions. It replicates your data with no impact on database performance, enables fast local reads with low latency in each region, and provides disaster recovery from region-wide outages.

    Critical workloads with a global footprint, such as financial, travel, or gaming applications, have strict availability requirements and may need to tolerate a region-wide outage. Traditionally this required difficult tradeoffs between performance, availability, cost, and data integrity. Global Database uses storage-based replication with typical latency of less than 1 second, using dedicated infrastructure that leaves your database fully available to serve application workloads.
extra:
  entity: aws_rds_global_cluster
  type: resource
guidelines: |-
    #### Description
    Amazon Aurora (Aurora) is a fully managed relational database engine that's compatible with MySQL and PostgreSQL. You already know how MySQL and PostgreSQL combine the speed and reliability of high-end commercial databases with the simplicity and cost-effectiveness of open-source databases. The code, tools, and applications you use today with your existing MySQL and PostgreSQL databases can be used with Aurora.

    Amazon Aurora Global Database is designed for globally distributed applications, allowing a single Amazon Aurora database to span multiple AWS regions. It replicates your data with no impact on database performance, enables fast local reads with low latency in each region, and provides disaster recovery from region-wide outages.

    Critical workloads with a global footprint, such as financial, travel, or gaming applications, have strict availability requirements and may need to tolerate a region-wide outage. Traditionally this required difficult tradeoffs between performance, availability, cost, and data integrity. Global Database uses storage-based replication with typical latency of less than 1 second, using dedicated infrastructure that leaves your database fully available to serve application workloads.

    #### Rationale
    Native RDS encryption helps protect your cloud applications and fulfils compliance requirements for data-at-rest encryption.

    #### Remediation
    Set `storage_encrypted = true` to encrypt the DB cluster. Default value is `false`.

    Terraform example
    ```
    resource "aws_rds_global_cluster" "example" {
        force_destroy                = true
        global_cluster_identifier    = "example"
        source_db_cluster_identifier = aws_rds_cluster.example.arn
    +   storage_encrypted            = true
        ...
        ...
    }

    resource "aws_rds_cluster" "primary" {
        provider = aws.primary
        global_cluster_identifier = aws_rds_global_cluster.example.id
        ...
        ...
    }
    ```

    CloudFormation example
    ```json
    {
      "Type" : "AWS::RDS::GlobalCluster",
      "Properties" : {
          "Engine" : "aurora-mysql",
          "EngineVersion" : "5.7.mysql_aurora.2.06.0"
          "GlobalClusterIdentifier" : "example",
    +     "StorageEncrypted" : true,
          "DeletionProtection" : true,
          ...
          ...
        }
    }
    ```

    #### References
    * https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_global_cluster#storage_encrypted
    * https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html
lwid: []
provider: AWS
ruleId: CKV_AWS_140
severity: High
sid: ckv-aws-140
title: "Ensure that RDS global clusters are encrypted"
autofix: true
remediation:
- checkType: Terraform
  steps:
  - action: add
    resource: [ "resource" ]
    resourceAttribute: storage_encrypted
    resourceAttributeType: boolean
    resourceAttributeValue: "true"
    resourceType: [ "aws_rds_global_cluster" ]
