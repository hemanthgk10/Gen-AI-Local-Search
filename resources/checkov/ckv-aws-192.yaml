---
category: Encryption
checkTool: checkov
checkType: Terraform
compliance: []
description: |-
    Customers can use AWS Web Application Firewall, following AWS Managed Rules for AWS WAF to help protect their Amazon CloudFront distribution, Amazon API Gateway REST API, Application Load Balancer, or AWS AppSync GraphQL API resources.

    * AWSManagedRulesKnownBadInputsRuleSet esp. the `Log4JRCE` rule which helps inspects the request for the presence of the Log4j vulnerability. Example patterns include ${jndi:ldap://example.com/}.
    * AWSManagedRulesAnonymousIpList esp. the `AnonymousIPList` rule which helps inspect IP addresses of sources known to anonymize client information.
    * AWSManagedRulesCommonRuleSet, esp. the `SizeRestrictions_BODY` rule to verify that the request body size is at most 8 KB (8,192 bytes).
extra:
  entity: aws_wafv2_web_acl
  type: resource
guidelines: |-
    #### Description
    Customers can use AWS Web Application Firewall, following AWS Managed Rules for AWS WAF to help protect their Amazon CloudFront distribution, Amazon API Gateway REST API, Application Load Balancer, or AWS AppSync GraphQL API resources.

    * AWSManagedRulesKnownBadInputsRuleSet esp. the `Log4JRCE` rule which helps inspects the request for the presence of the Log4j vulnerability. Example patterns include ${jndi:ldap://example.com/}.
    * AWSManagedRulesAnonymousIpList esp. the `AnonymousIPList` rule which helps inspect IP addresses of sources known to anonymize client information.
    * AWSManagedRulesCommonRuleSet, esp. the `SizeRestrictions_BODY` rule to verify that the request body size is at most 8 KB (8,192 bytes).

    #### Rationale
    Customers can use multiple AWS services to help limit their risk/exposure from the Log4j vulnerability. Customers can build a layered control approach, and/or pick and choose the controls identified below to help limit their exposure.

    #### Remediation
    Do not set the `excluded_rule` to `Log4JRCE` and have an `override_action` set to `none`.

    Terraform example
    ```
    resource "aws_wafv2_web_acl" "example" {
        name        = "managed-rule-example"
        description = "Example of a managed rule."
        scope       = "REGIONAL"

        default_action {
          allow {}
        }

        rule {
          name     = "rule-1"
          priority = 1

    -     override_action {
    -        none {}
    -     }

    +     override_action {
    +        count {}
    +     }

          statement {
            managed_rule_group_statement {
              name        = "AWSManagedRulesCommonRuleSet"
              vendor_name = "AWS"

    -         excluded_rule {
    -           name = "Log4JRCE"
    -         }

              excluded_rule {
                name = "NoUserAgent_HEADER"
              }
            }
          }
          ...
          ...
        }
        ...
        ...
    }
    ```

    CloudFormation example
    ```json
    {
      "Type" : "AWS::WAFv2::WebACL",
      "Properties" : {
          "Name": "managed-rule-example",
          "Description": "Example of a managed rule",
          "Scope": "REGIONAL",
          "Rule": {
            "Name": "rule-1",
            "Priority": 1,
    -       "OverrideAction": {
    -          "None" : {}
    -       }
    +       "OverrideAction": {
    +          "None" : {}
    +       }
            "Statement": {
              "ManagedRuleGroupStatement": {
                  "Name": "AWSManagedRulesCommonRuleSet",
                  "VendorName": "AWS",
    -             "ExcludedRule": {
    -                "Name": "Log4JRCE"
    -             }
                }
            }

          }
          ...
          ...
      }
    }

    #### References
    * https://registry.terraform.io/providers/babylonhealth/aws-babylon/latest/docs/resources/wafv2_web_acl
    * https://nvd.nist.gov/vuln/detail/CVE-2021-44228
    * https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html
    * https://aws.amazon.com/blogs/security/using-aws-security-services-to-protect-against-detect-and-respond-to-the-log4j-vulnerability/
lwid: []
provider: AWS
ruleId: CKV_AWS_192
severity: High
sid: ckv-aws-192
title: "Ensure WAF prevents message lookup in Log4j2. See CVE-2021-44228 aka log4jshell"
