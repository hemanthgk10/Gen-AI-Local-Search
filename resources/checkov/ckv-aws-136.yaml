---
autofix: true
category: Encryption
checkTool: checkov
checkType: Terraform
compliance: []
description: |-
    Amazon Elastic Container Registry (Amazon ECR) is an AWS managed container image registry service that is secure, scalable, and reliable. Amazon ECR supports private container image repositories with resource-based permissions using AWS IAM. This is so that specified users or Amazon EC2 instances can access your container repositories and images.

    Amazon ECR stores images in Amazon S3 buckets that Amazon ECR manages. By default, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part and is offered at no additional charge. For more information, see Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) in the Amazon Simple Storage Service Developer Guide.

    For more control over the encryption for your Amazon ECR repositories, you can use server-side encryption with customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS). When you use AWS KMS to encrypt your data, you can either use the default AWS-managed CMK, which is managed by Amazon ECR, or specify your own CMK (referred to as a customer managed CMK).     When a repository is created with AWS KMS encryption enabled, a CMK is used to encrypt the contents of the repository.
extra:
  entity: aws_ecr_repository
  type: resource
guidelines: |-
    #### Description
    Amazon Elastic Container Registry (Amazon ECR) is an AWS managed container image registry service that is secure, scalable, and reliable. Amazon ECR supports private container image repositories with resource-based permissions using AWS IAM. This is so that specified users or Amazon EC2 instances can access your container repositories and images.

    Amazon ECR stores images in Amazon S3 buckets that Amazon ECR manages. By default, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part and is offered at no additional charge. For more information, see Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) in the Amazon Simple Storage Service Developer Guide.

    For more control over the encryption for your Amazon ECR repositories, you can use server-side encryption with customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS). When you use AWS KMS to encrypt your data, you can either use the default AWS-managed CMK, which is managed by Amazon ECR, or specify your own CMK (referred to as a customer managed CMK).     When a repository is created with AWS KMS encryption enabled, a CMK is used to encrypt the contents of the repository.

    #### Rationale
    Creating your own customer managed CMK gives you more flexibility and control. For example, you can create, rotate, and disable customer managed CMKs. You can also define access controls and audit the customer managed CMKs that you use to protect your data.

    #### Remediation
    Set `encryption_configuration` for `aws_ecr_repository`. Valid encryption types are `KMS` and `AES256`. Recommended one is `KMS`.

    Terraform example:
    ```
    resource "aws_ecr_repository" "foo" {
        name                 = "bar"
        image_tag_mutability = "MUTABLE"

        image_scanning_configuration {
          scan_on_push = true
        }
    +   encryption_configuration {
    +     encryption_type = "KMS"
    +     kms_key         = "alias/aws/ecr-key"
    +   }
        ...
        ...
    }
    ```

    CloudFormation example:
    ```
    {
      "Type" : "AWS::ECR::Repository",
      "Properties" : {
    +     "EncryptionConfiguration" : {
    +        "EncryptionType" : "KMS",
    +        "KmsKey" : "arn:aws:kms:us-west-2:111122223333:key/example-123"
    +     },
          "ImageScanningConfiguration" : {
             "ScanOnPush" : true
          },
          "ImageTagMutability" : "MUTABLE",
          "RepositoryName" : "bar",
          ...
          ...
        }
    }
    ```

    Note: Currently, CloudFormation doesn't support the `EncryptionConfiguration`.

    #### References
    * https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#encryption_configuration
    * https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
    * https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecr-repository-encryptionconfiguration.html#cfn-ecr-repository-encryptionconfiguration-kmskey
lwid: []
provider: AWS
remediation:
  -
    checkType: Terraform
    steps:
      -
        action: modify
        resource:
          - resource
        resourceAttribute: encryption_configuration
        resourceAttributeType: block
        resourceAttributeValue: |-
            encryption_configuration {
               encryption_type = "KMS"
               kms_key         = "<Please provide the kms key here>"
            }
        resourceType:
          - aws_ecr_repository
ruleId: CKV_AWS_136
severity: Medium
sid: ckv-aws-136
title: "Ensure that ECR repositories are encrypted using KMS"
