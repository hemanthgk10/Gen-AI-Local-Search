---
category: IAM
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    A service account provides an identity for processes that run in a Pod. When a user access the cluster (for example, using kubectl), they are authenticated by the apiserver as a particular User Account. Processes in containers inside pods can also contact the apiserver. When they do, they are authenticated as a particular Service Account (for example, default).

    The controller manager creates a service account per controller in the `kube-system` namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. It is recommended to set a service account private key file for each of those service accounts on the controller manager.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes controller manager is a daemon that embeds the core control loops shipped with Kubernetes. A controller manager is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state.

    A service account provides an identity for processes that run in a Pod. When a user access the cluster (for example, using kubectl), they are authenticated by the apiserver as a particular User Account. Processes in containers inside pods can also contact the apiserver. When they do, they are authenticated as a particular Service Account (for example, default).

    The controller manager creates a service account per controller in the `kube-system` namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. It is recommended to set a service account private key file for each of those service accounts on the controller manager.

    #### Rationale
    To ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with --service-account-private-key-file as appropriate.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-controller-manager
    ```
    Verify that the `--service-account-private-key-file` argument is set as appropriate.

    #### Remediation
    Edit the Controller Manager pod specification file `/etc/kubernetes/manifests/kube-controller-manager.yaml` on the master node and set the `--service-account-private-key-file` parameter to the private key file for service accounts.

    By default, `--service-account-private-key-file` it not set.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          component: kube-controller-manager
          tier: control-plane
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - command:
          - /bin/sh
          - -c
          - exec /usr/local/bin/kube-controller-manager --v=2
            --cloud-config=/etc/gce.conf
            --kubeconfig=/etc/srv/kubernetes/kube-controller-manager/kubeconfig
            --root-ca-file=/etc/srv/kubernetes/pki/ca-certificates.crt
            --cluster-name=zork
            --cluster-cidr=10.48.0.0/14
            --service-cluster-ip-range=10.32.240.0/20
            --allocate-node-cidrs=true
            --use-service-account-credentials=true
    +       --service-account-private-key-file=/etc/srv/kubernetes/pki/serviceaccount.key
            ...
            ...
          image: k8s.gcr.io/kube-controller-manager:v1.9.7
          name: kube-controller-manager
          volumeMounts:
          - mountPath: /etc/ssl
            name: etcssl
            readOnly: true
          - mountPath: /usr/share/ca-certificates
            name: usrsharecacerts
            readOnly: true
          - mountPath: /var/ssl
            name: varssl
            readOnly: true
          - mountPath: /etc/openssl
            name: etcopenssl
            readOnly: true
          - mountPath: /etc/pki
            name: etcpki
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/ssl
          name: etcssl
        - hostPath:
            path: /usr/share/ca-certificates
          name: usrsharecacerts
        - hostPath:
            path: /var/ssl
          name: varssl
        - hostPath:
            path: /etc/openssl
          name: etcopenssl
        - hostPath:
            path: /etc/pki
          name: etcpki
        ...
        ...
    ```

    #### Impact
    You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.

    #### CIS Controls:
    **Version 6**
      14 *Controlled Access Based on the Need to Know* -- Controlled Access Based on the Need to Know.

    #### References
    * https://kubernetes.io/docs/admin/kube-controller-manager/
provider: Kubernetes
ruleId: CKV_K8S_110
severity: Medium
sid: ckv-k8s-110
title: "Ensure that the --service-account-private-key-file argument is set as appropriate"
