---
category: Security
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized. The controllers consist of the [list](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do), are compiled into the kube-apiserver binary, and may only be configured by the cluster administrator.

    The admission controller can help in mitigating the problem where the API server gets flooded by event requests. The cluster admin can specify event rate limits by:
      * Enabling the EventRateLimit admission controller.
      * Referencing an EventRateLimit configuration file from the file provided to the API server's command line flag `--admission-control-config-file`.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes has emerged as the de facto standard in container orchestrators thanks to its flexibility, scalability, and ease of use. Kubernetes also provides a range of features that secure production workloads. A more recent introduction in security features is a set of plugins called `admission controllers.`

    An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized. The controllers consist of the [list](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do), are compiled into the kube-apiserver binary, and may only be configured by the cluster administrator.

    The admission controller can help in mitigating the problem where the API server gets flooded by event requests. The cluster admin can specify event rate limits by:
      * Enabling the EventRateLimit admission controller.
      * Referencing an EventRateLimit configuration file from the file provided to the API server's command line flag `--admission-control-config-file`.

    #### Rationale
    Using `EventRateLimit` admission control enforces a limit on the number of events that the API Server will accept in a given time slice. A misbehaving workload could overwhelm and DoS the API Server, making it unavailable. This particularly applies to a multi-tenant cluster, where there might be a small percentage of misbehaving tenants which could have a significant impact on the performance of the cluster overall. Hence, it is recommended to limit the rate of events that the API server will accept.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-apiserver
    ```
    Verify that the `--enable-admission-plugins` argument is set to a value that includes `EventRateLimit`.

    #### Remediation
    Follow the Kubernetes documentation and set the desired limits in a configuration file. Then, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` and set the below parameters.
    ```
      --enable-admission-plugins=...,EventRateLimit,...
      --admission-control-config-file=<path/to/configuration/file>
    ```

    By default, EventRateLimit is not set.

    `Note:` This is an Alpha feature in the Kubernetes 1.15 release.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        labels:
          component: kube-apiserver
          tier: control-plane
        name: kube-apiserver
        namespace: kube-system
      spec:
        containers:
        - command:
          - kube-apiserver
          - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota
          - --etcd-servers=http://127.0.0.1:2379
          - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
          - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
          - --kubelet-certificate-authority=/etc/kubernetes/pki/ca.crt
          - --authorization-mode=Node,RBAC
    +     - --admission-control-config-file=admission-config.yaml
    -     - --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota
    +     - --enable-admission-plugins=EventRateLimit,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota
          ...
          ...

          image: gcr.io/google_containers/kube-apiserver-amd64:v1.8.0
          livenessProbe:
            failureThreshold: 8
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 6443
              scheme: HTTPS
            initialDelaySeconds: 15
            timeoutSeconds: 15
          name: kube-apiserver
          resources:
            requests:
              cpu: 250m
          volumeMounts:
          - mountPath: /etc/kubernetes/pki
            name: k8s-certs
            readOnly: true
          ...
          ...
    ```

    #### Impact
    You need to carefully tune in limits as per your environment.

    #### References
    * https://kubernetes.io/docs/admin/kube-apiserver/
    * https://kubernetes.io/docs/admin/admission-controllers/#eventratelimit
    * https://github.com/staebler/community/blob/9873b632f4d99b5d99c38c9b15fe2f8b93d0a746/contributors/design-proposals/admission_control_event_rate_limit.md
provider: Kubernetes
ruleId: CKV_K8S_78
severity: Low
sid: ckv-k8s-78
title: "Ensure that the admission control plugin EventRateLimit is set"
