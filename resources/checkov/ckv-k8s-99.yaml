---
category: Security
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes uses a popular key-value pair datastore (ETCD) for persisting the data in the cluster.

    ETCD is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines.

    Kubernetes API server is the entry point for storing/retrieving the data from ETCD in a cluster. As ETCD might have sensitive information like tokens etc, the communication between API server and ETCD should be secure and validated for every request.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    Kubernetes uses a popular key-value pair datastore (ETCD) for persisting the data in the cluster.

    ETCD is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines.

    Kubernetes API server is the entry point for storing/retrieving the data from ETCD in a cluster. As ETCD might have sensitive information like tokens etc, the communication between API server and ETCD should be secure and validated for every request.

    #### Rationale
    The objects in ETCD are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.

    #### Audit
    Run the following command on the master node:
    ```
     ps -ef | grep kube-apiserver
    ```
    Verify that the `--etcd-certfile` and `--etcd-keyfile` arguments exist and they are set as appropriate.

    #### Remediation
    Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` on the master node and set the etcd certificate and key file parameters.

    ```
       --etcd-certfile=<path/to/client-certificate-file>
       --etcd-keyfile=<path/to/client-key-file>
    ```

    By default, `--etcd-certfile` and `--etcd-keyfile` arguments are not set.

    Example:
    ```yaml
      apiVersion: v1
      kind: Pod
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        labels:
          component: kube-apiserver
          tier: control-plane
        name: kube-apiserver
        namespace: kube-system
      spec:
        containers:
        - command:
          - kube-apiserver
          - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota
          - --etcd-servers=http://127.0.0.1:2379
          - --authorization-mode=Node,RBAC
          - --admission-control-config-file=admission-config.yaml
          - --enable-admission-plugins=NodeRestriction,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota
          - --secure-port=6443
          - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
          - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
          - --audit-log-path=/var/log/apiserver/audit.log
          - --audit-log-maxage=30
          - --audit-log-maxbackup=10
          - --audit-log-maxsize=100
          - --request-timeout=60
          - --service-account-lookup=true
          - --service-account-key-file=/etc/kubernetes/pki/sa.pub
    +     - --etcd-certfile=/etc/etcd/pki/etcd.crt
    +     - --etcd-keyfile=/etc/etcd/pki/etcd.key
          ...
          ...

          image: gcr.io/google_containers/kube-apiserver-amd64:v1.8.0
          livenessProbe:
            failureThreshold: 8
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 6443
              scheme: HTTPS
            initialDelaySeconds: 15
            timeoutSeconds: 15
          name: kube-apiserver
          resources:
            requests:
              cpu: 250m
          volumeMounts:
          - mountPath: /etc/kubernetes/pki
            name: k8s-certs
            readOnly: true
          ...
          ...
    ```

    #### Impact
    TLS and client certificate authentication must be configured for etcd.

    #### References
    * https://kubernetes.io/docs/admin/kube-apiserver/
    * https://coreos.com/etcd/docs/latest/op-guide/security.html
provider: Kubernetes
ruleId: CKV_K8S_99
severity: Medium
sid: ckv-k8s-99
title: "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate"
