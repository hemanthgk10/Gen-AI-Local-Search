---
category: Security
checkTool: checkov
checkType: Kubernetes
compliance:
  - CIS
description: |-
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    kubelet is the primary "node agent" that runs on each node in a Kubernetes cluster. The kubelet works in terms of a PodSpec. A PodSpec is a YAML or JSON object that describes a pod. The kubelet takes a set of PodSpecs that are provided through various mechanisms (primarily through the apiserver) and ensures that the containers described in those PodSpecs are running and healthy.

    By default, requests to the kubelet's HTTPS endpoint that are not rejected by other configured authentication methods are treated as anonymous requests, and given a username of `system:anonymous` and a group of `system:unauthenticated`. It is recommended to use certificate based authentication.
extra:
  entity: containers
  type: resource
guidelines: |-
    #### Description
    Kubernetes is an open source platform for orchestrating containers. A container is a technology that lets you bundle and isolate applications with their entire runtime environment so that it’s easy to move the contained application between stages (development, production, etc.) and environments (on-premise, public cloud, private cloud, hybrid cloud, or multicloud) while retaining full functionality.

    kubelet is the primary "node agent" that runs on each node in a Kubernetes cluster. The kubelet works in terms of a PodSpec. A PodSpec is a YAML or JSON object that describes a pod. The kubelet takes a set of PodSpecs that are provided through various mechanisms (primarily through the apiserver) and ensures that the containers described in those PodSpecs are running and healthy.

    The kubelet serves a small REST API on ports `10250` and `10255`. Port `10250` is a read/write port, whilst `10255` is a read-only port with a subset of the API endpoints.

    To safeguard against potential compromise, the read-only port should be disabled, by setting the kubelet’s configuration, --read-only-port=0

    #### Rationale
    Providing unfettered access to port 10250 is dangerous, as it’s possible to execute arbitrary commands inside a pod’s containers, as well as start arbitrary pods. Similarly, both ports `10250` and `10255`,  provide read access to potentially sensitive information concerning pods and their containers, which might render workloads vulnerable to compromise.

    #### Audit
    Run the following command on each node:
    ```
     ps -ef | grep kubelet
    ```
    Verify that the `--read-only-port` argument exists and is set to `0`.

    If the `--read-only-port` argument is not present, check that there is a Kubelet config file specified by `--config`. Check that if there is a `readOnlyPort` entry in the file, it is set to `0`.

    #### Remediation
    If using a Kubelet config file, edit the file to set `readOnlyPort` to `0`.

    If using executable arguments, edit the kubelet service file `/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and set the below parameter in `KUBELET_AUTHZ_ARGS` variable.
    ```
        --read-only-port=0
    ```

    Based on your system, restart the `kubelet` service. For example:
    ```
       systemctl daemon-reload
       systemctl restart kubelet.service
    ```

    By default, `--client-ca-file` argument is not set.

    Example of Kubelet Configuration file:
    ```yaml
         apiVersion: kubelet.config.k8s.io/v1beta1
         kind: KubeletConfiguration
         address: 0.0.0.0
         authentication:
            anonymous:
              enabled: false
            x509:
              clientCaFile: "/etc/pf9/kube.d/certs/kubelet/server/ca.crt"
         evictionHard:
            memory.available:  "200Mi"
         podCIDR: 10.200.0.0/16
         authorization:
            mode: Webhook
         maxPods: 200
    -    readOnlyPort: 10250
    +    readOnlyPort: 0
         ...
         ...
    ```

    #### Impact
    Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.

    #### References
    * https://kubernetes.io/docs/admin/kubelet/
    * https://www.giantswarm.io/blog/securing-the-configuration-of-kubernetes-cluster-components

    #### CIS Controls:
    **Version 6**
      *9.1 Limit Open Ports, Protocols, and Services* -- Ensure that only ports, protocols, and services with validated business needs are running on each system.

    **Version 7**
      *9.2 Ensure Only Approved Ports, Protocols and Services Are Running* -- Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.
provider: Kubernetes
ruleId: CKV_K8S_141
severity: Medium
sid: ckv-k8s-141
title: "Ensure that the --read-only-port argument is set to 0"
